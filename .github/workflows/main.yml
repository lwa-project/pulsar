name: Test
on:
  push:
  pull_request:
  schedule:
    - cron:  '30 5 3 * *'
jobs:
  pre_build:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: 'same_content'
          paths_ignore: '["README.md"]'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  build:
    needs: pre_build
    if: ${{ needs.pre_build.outputs.should_skip != 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.10', '3.12']
      fail-fast: false
    steps:
        - name: "Software Install - Ubuntu"
          if: ${{ matrix.os == 'ubuntu-latest' }}
          run: |
            sudo apt-get -q update
            sudo apt-get install -y \
              build-essential \
              ca-certificates \
              git \
              gzip \
              libcfitsio-dev \
              libfftw3-dev \
              libgdbm-dev \
              libgtk-3-dev \
              libhdf5-dev \
              pkg-config \
              tcsh \
              swig
        - name: "Software Install - MacOS"
          if: ${{ matrix.os == 'macos-latest' }}
          run: |
            brew install \
              autoconf \
              automake \
              fftw \
              hdf5 \
              libtool \
              pkg-config \
              swig
        - uses: actions/setup-python@v5.0.0
          with:
            python-version: ${{ matrix.python-version }}
        - uses: actions/checkout@v2
        - name: "Software Install - Python"
          run: |
            export CFLAGS=`pkg-config --cflags cfitsio`
            export LDFLAGS=`pkg-config --libs cfitsio`
            pip install numpy
            pip install attrdict
            pip install -r requirements.txt
            pip install pylint
        - name: Build
          run: make
        - name: "Software Install - MacOS, part 2"
          if: ${{ matrix.os == 'macos-latest' }}
          run: |
            brew install cfitsio
        - name: "Build and Install psrfits_utils"
          run: |
            git clone https://github.com/lwa-project/psrfits_utils.git
            cd psrfits_utils
            ./prepare
            CFLAGS=`pkg-config --cflags cfitsio` LDFLAGS=`pkg-config --libs cfitsio` ./configure
            make all
            cp ./.libs/*[sd][oy]* ./
            sudo make install
        - name: Test
          run: |
            cd tests
            python -m unittest discover
